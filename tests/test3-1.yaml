---
esphome:
  name: $device_name
  comment: $device_comment
  build_path: build/test3-1

esp8266:
  board: d1_mini
  early_pin_init: true

substitutions:
  device_name: test3-1
  device_comment: test3-1 device
  min_sub: "0.03"
  max_sub: "12.0%"

api:
  port: 8000
  password: pwd

wifi:
  ssid: "MySSID"
  password: "password1"
# RS485 Component (for ttl to rs485 module)
#  - esp8266: UART0 (TX: GPIO1, RX: GPIO3)
#  - esp32: UART2 (TX: GPIO17, RX: GPIO16)
rs485:
  baud_rate: 9600 #Required
  data_bits: 8 #Option(default: 8)
  parity: 0 #Option(default: 0)
  stop_bits: 1 #Option(default: 1)

  rx_wait: 10 #Option(default: 10ms)  -> 수신 메시지 대기시간 (10ms 미만으로 수신된 메시지만 한 패킷으로 판단)
  tx_interval: 50 #Option(default: 50ms) -> 발신 메시지 전송 간격 (패킷 수신 후 50ms 대기 후 전송)
  tx_wait: 100 #Option(default: 100ms) -> 발신 메시지 Ack 대기시간
  tx_retry_cnt: 3 #Option(default: 3)     -> 발신 메시지 Ack 없을 경우 재시도 횟수
  prefix: [0xF7] #Option -> 값 세팅시 모든 수신 패킷 Check, 발신 패킷에 Append
  suffix: [0xEE] #Option -> 값 세팅시 모든 수신 패킷 Check, 발신 패킷에 Append

  checksum: True #Option(default: False) -> 체크섬 사용여부 (lambda 사용시 세팅 불필요)
  # checksum_lambda: |- #Option -> Default(CheckSum8 Xor) 체크섬 아닐 경우 직접 로직 구현(아래 값은 Default 로직임)
  #   // @param: const uint8_t *data, const unsigned short len
  #   // @return: uint8_t
  #   uint8_t crc = 0xF7; // data 변수에는 prefix 제외되어 있음
  #   for(num_t i=0; i<len; i++)
  #     crc ^= data[i];
  #   return crc;

  state_response: #Option -> 값 세팅시 response 패킷 수신 후에 명령 패킷 송신
    data: [0x04]
    offset: 3

  packet_monitor: #Option -> 패킷 모니터: Array 없으면 전체 출력, 있을 경우 or 조건 (logger level DEBUG 추천)
    - [0x0D, 0x01, 0x34] #0ffset:0
    #- data: [0x04]
    #  offset: 3

# RS485 Light(like Binary Light) ###################################
#현대통신
#거실- 3구 (3Way 포함)
#상태조회
#>F7 0B 01 19 01 40 x1 00 00 << (x1 - 11:거실1, 12:거실2, 13:3Way)
#<F7 0B 01 19 04 40 x1 00 x2 << (x2 - 02:off, 01:on#)
#명령
#>F7 0B 01 19 02 40 x1 x3 00 << (x3 - 01:on, 02:off)
#<F7 0B 01 19 04 40 x1 x4 x4 << (x4 - 0101:on, 0202:off)
# light:
#   - platform: rs485
#     name: "Livingroom1"
#     device: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x11, 0x00]
#     state_on:
#       offset: 7
#       data: [0x01]
#     state_off:
#       offset: 7
#       data: [0x02]
#     command_on:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x11, 0x01, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x11, 0x01, 0x01]
#     command_off:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x11, 0x02, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x11, 0x02, 0x02]
#     command_state: [0x0b, 0x01, 0x19, 0x01, 0x40, 0x11, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 20s # 상태요청 주기

#   - platform: rs485
#     name: "Livingroom2"
#     device: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x12, 0x00]
#     state_on:
#       offset: 7
#       data: [0x01]
#     state_off:
#       offset: 7
#       data: [0x02]
#     command_on:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x12, 0x01, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x12, 0x01, 0x01]
#     command_off:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x12, 0x02, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x12, 0x02, 0x02]
#     command_state: [0x0b, 0x01, 0x19, 0x01, 0x40, 0x12, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 21s # 상태요청 주기

#   - platform: rs485
#     name: "3Way"
#     device: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x13, 0x00]
#     state_on:
#       offset: 7
#       data: [0x01]
#     state_off:
#       offset: 7
#       data: [0x02]
#     command_on:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x13, 0x01, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x13, 0x01, 0x01]
#     command_off:
#       data: [0x0b, 0x01, 0x19, 0x02, 0x40, 0x13, 0x02, 0x00]
#       ack: [0x0b, 0x01, 0x19, 0x04, 0x40, 0x13, 0x02, 0x02]
#     command_state: [0x0b, 0x01, 0x19, 0x01, 0x40, 0x13, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 22s # 상태요청 주기
# RS485 Light(like Binary Light) ###################################

###################################
# RS485 Fan
fan:
  #F70B 012B 0140 1100 0086 EE  >>상상태조회 MainTouch
  #F70C 012B 0440 1100 0207 81EE  <<응답상태끔
  #F70C 012B 0440 1100 0101 84EE  <<응답상태약
  #F70C 012B 0440 1100 0103 86EE  <<응답상태중
  #F70C 012B 0440 1100 0107 82EE  <<응답상태강

  #환기 off cmd
  #>f70b 012b 0240 1102 0087ee
  #<f70c 012b 0441 2b04 4011 00020781ee
  #환기 on cmd
  #>f70b 012b 0242 1101 0086ee
  #<f70c 012b 0441 2b04 4011 00010184ee

  #환기 on 3단 cmd
  #>f70b 012b 0242 1107 0080ee
  #<f70c 012b 0441 2b04 4011 0001 0782ee
  #환기 on 2단 cmd
  #>f70b 012b 0242 1103 0084ee
  #<f70c 012b 0441 2b04 4011 0001 0386ee
  #환기 on 1단 cmd
  #>f70b 012b 0242 1101 0086ee
  #<f70c 012b 0441 2b04 4011 0001 0184ee
  - platform: rs485
    name: "Ventilation"
    device: [0x0c, 0x01, 0x2b, 0x04, 0x40, 0x11, 0x00]
    state_on:
      offset: 7
      data: [0x01]
    state_off:
      offset: 7
      data: [0x02]
    command_on:
      data: [0x0b, 0x01, 0x2b, 0x02, 0x42, 0x11, 0x01, 0x00]
      ack: [0x0c, 0x01, 0x2b, 0x04, 0x41, 0x2b, 0x04, 0x40, 0x11, 0x00, 0x01]
    command_off:
      data: [0x0b, 0x01, 0x2b, 0x02, 0x40, 0x11, 0x02, 0x00]
      ack: [0x0c, 0x01, 0x2b, 0x04, 0x40, 0x2b, 0x04, 0x40, 0x11, 0x00, 0x02]
#     speed: #Option(high, medium, low) -> 없으면 Binary Fan
#       high:
#         state:
#           offset: 7
#           data: [0x01, 0x07]
#         command:
#           data: [0x0b, 0x01, 0x2b, 0x02, 0x42, 0x11, 0x07, 0x00]
#           ack:
#             [0x0c, 0x01, 0x2b, 0x04, 0x41, 0x2b, 0x04, 0x11, 0x00, 0x01, 0x07]
#       medium:
#         state:
#           offset: 7
#           data: [0x01, 0x03]
#         command:
#           data: [0x0b, 0x01, 0x2b, 0x02, 0x42, 0x11, 0x03, 0x00]
#           ack:
#             [0x0c, 0x01, 0x2b, 0x04, 0x41, 0x2b, 0x04, 0x11, 0x00, 0x01, 0x03]
#       low:
#         state:
#           offset: 7
#           data: [0x01, 0x01]
#         command:
#           data: [0x0b, 0x01, 0x2b, 0x02, 0x42, 0x11, 0x01, 0x00]
#           ack:
#             [0x0c, 0x01, 0x2b, 0x04, 0x41, 0x2b, 0x04, 0x11, 0x00, 0x01, 0x01]
#     command_state: [0x0B, 0x01, 0x2B, 0x01, 0x40, 0x11, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 50s # 상태요청 주기
###################################

# switch:
#   #도어락#################################################
#   #F7 0E 01 1E 02 43 11 04 00 04 FF FF B6 EE
#   #F7 0C 01 1E 04 43 11 04 00 04 B2 EE
#   #switch:
#   - platform: template
#     name: doorlock
#     turn_on_action:
#       - rs485.write:
#           data:
#             [0x0e, 0x01, 0x1e, 0x02, 0x43, 0x11, 0x04, 0x00, 0x04, 0xff, 0xff]
#           ack: [0x0c, 0x01, 0x1e, 0x04, 0x43, 0x11, 0x04, 0x00, 0x04]

#   # 내부 풀업 저항 설정을 위해서 추가
#   - platform: gpio
#     pin: D5 #GPIO14
#     name: "D5"
#     #restore_mode: ALWAYS_ON
#   - platform: gpio
#     pin: D6 #GPIO12
#     name: "D6"
#     #restore_mode: ALWAYS_ON
#   - platform: gpio
#     pin: D7 #GPIO13
#     name: "D7"
#   - platform: gpio
#     pin: D1 #GPIO5
#     name: "D1"
#   - platform: gpio
#     pin: D2 #GPIO4
#     name: "D2"

# # RS485 Climate
# climate:
#   # [거실 난방] 0x11
#   # 상태 요청: 0xF7, 0x0B, 0x01, 0x18, 0x01, 0x45, 0x11, 0x00, 0x00, 0xB0, 0xEE
#   # 켜짐 상태: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x45, 0x11, 0x00, (0x01, 0x1B, 0x17), 0xBE, 0xEE (상태, 현재온도, 설정온도)
#   # 꺼짐 상태: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x45, 0x11, 0x00, (0x04, 0x1B, 0x17), 0xBB, 0xEE (상태, 현재온도, 설정온도)
#   # 외출 상태: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x45, 0x11, 0x00, (0x07, 0x1B, 0x17), 0xB9, 0xEE
#   # 켜짐 명령: 0xF7, 0x0B, 0x01, 0x18, 0x02, 0x46, 0x11, 0x01, 0x00, 0xB1, 0xEE
#   #      ACK: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x01, 0x01, 0x1B, 0x17, 0xBC, 0xEE
#   # 꺼짐 명령: 0xF7, 0x0B, 0x01, 0x18, 0x02, 0x46, 0x11, 0x04, 0x00, 0xB4, 0xEE
#   #      ACK: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x04, 0x04, 0x1B, 0x17, 0xBC, 0xEE
#   # 온도 조절: 0xF7, 0x0B, 0x01, 0x18, 0x02, 0x45, 0x11, (0x18), 0x00, 0xA7, 0xEE (온도 24도 설정)
#   #      ACK: 0xF7, 0x0D, 0x01, 0x18, 0x04, 0x45, 0x11, (0x18), 0x01, (0x1A, 0x18), 0xA8, 0xEE
#   - platform: rs485
#     name: "Livingroom Heater"
#     visual:
#       min_temperature: 20 °C
#       max_temperature: 30 °C
#       temperature_step: 1 °C
#     device: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x00]
#     state_heat: #Option (난방모드, 냉방모드: state_cool, 자동모드: state_auto)
#       offset: 7
#       data: [0x01]
#     state_off: #Required (끄기 상태)
#       offset: 7
#       data: [0x04]
#     state_away: #Option (외출모드)
#       offset: 7
#       data: [0x07]
#     state_current: #Required (현재온도 State, RS485 Sensor 설정 참고, sensor:로 대체 가능)
#       offset: 8
#       length: 1
#       precision: 0
#     state_target: #Required (설정온도 State)
#       offset: 9
#       length: 1
#       precision: 0

#     command_off: #Required (끄기 명령)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x11, 0x04, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x04, 0x04]
#     command_heat: #Option (난방모드 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x11, 0x01, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x01, 0x01]
#     command_away: #Option (외출 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x11, 0x07, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x11, 0x07, 0x07]
#     command_temperature: !lambda |- #Required (온도 조절)
#       // @param: const float x
#       return {
#                {0x0B, 0x01, 0x18, 0x02, 0x45, 0x11, (uint8_t)x, 0x00},
#                {0x0D, 0x01, 0x18, 0x04, 0x45, 0x11, (uint8_t)x, 0x01}
#             };
#     command_state: [0x0B, 0x01, 0x18, 0x01, 0x46, 0x11, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 60s # 상태요청 주기

#   - platform: rs485
#     name: "room1 Heater"
#     visual:
#       min_temperature: 20 °C
#       max_temperature: 30 °C
#       temperature_step: 1 °C
#     device: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x12, 0x00]
#     state_current: #Required (현재온도 State, RS485 Sensor 설정 참고, sensor:로 대체 가능)
#       offset: 8
#       length: 1
#       precision: 0
#     state_target: #Required (설정온도 State)
#       offset: 9
#       length: 1
#       precision: 0
#     state_off: #Required (끄기 상태)
#       offset: 7
#       data: [0x04]
#     state_heat: #Option (난방모드, 냉방모드: state_cool, 자동모드: state_auto)
#       offset: 7
#       data: [0x01]
#     state_away: #Option (외출모드)
#       offset: 7
#       data: [0x07]
#     command_off: #Required (끄기 명령)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x12, 0x04, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x12, 0x04, 0x04]
#     command_heat: #Option (난방모드 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x12, 0x01, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x12, 0x01, 0x01]
#     command_away: #Option (외출 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x12, 0x07, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x12, 0x07, 0x07]
#     command_temperature: !lambda |- #Required (온도 조절)
#       // @param: const float x
#       return {
#                {0x0B, 0x01, 0x18, 0x02, 0x45, 0x12, (uint8_t)x, 0x00},
#                 {0x0D, 0x01, 0x18, 0x04, 0x45, 0x12, (uint8_t)x, 0x01}
#             };
#     command_state: [0x0B, 0x01, 0x18, 0x01, 0x46, 0x12, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 61s # 상태요청 주기

#   - platform: rs485
#     name: "room2 Heater"
#     visual:
#       min_temperature: 20 °C
#       max_temperature: 30 °C
#       temperature_step: 1 °C
#     device: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x13, 0x00]
#     state_current: #Required (현재온도 State, RS485 Sensor 설정 참고, sensor:로 대체 가능)
#       offset: 8
#       length: 1
#       precision: 0
#     state_target: #Required (설정온도 State)
#       offset: 9
#       length: 1
#       precision: 0
#     state_off: #Required (끄기 상태)
#       offset: 7
#       data: [0x04]
#     state_heat: #Option (난방모드, 냉방모드: state_cool, 자동모드: state_auto)
#       offset: 7
#       data: [0x01]
#     state_away: #Option (외출모드)
#       offset: 7
#       data: [0x07]
#     command_off: #Required (끄기 명령)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x13, 0x04, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x13, 0x04, 0x04]
#     command_heat: #Option (난방모드 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x13, 0x01, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x13, 0x01, 0x01]
#     command_away: #Option (외출 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x13, 0x07, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x13, 0x07, 0x07]
#     command_temperature: !lambda |- #Required (온도 조절)
#       // @param: const float x
#       return {
#                {0x0B, 0x01, 0x18, 0x02, 0x45, 0x13, (uint8_t)x, 0x00},
#                {0x0D, 0x01, 0x18, 0x04, 0x45, 0x13, (uint8_t)x, 0x01}
#             };
#     command_state: [0x0B, 0x01, 0x18, 0x01, 0x46, 0x13, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 62s # 상태요청 주기

#   - platform: rs485
#     name: "room3 Heater"
#     visual:
#       min_temperature: 20 °C
#       max_temperature: 30 °C
#       temperature_step: 1 °C
#     device: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x14, 0x00]
#     state_current: #Required (현재온도 State, RS485 Sensor 설정 참고, sensor:로 대체 가능)
#       offset: 8
#       length: 1
#       precision: 0
#     state_target: #Required (설정온도 State)
#       offset: 9
#       length: 1
#       precision: 0
#     state_off: #Required (끄기 상태)
#       offset: 7
#       data: [0x04]
#     state_heat: #Option (난방모드, 냉방모드: state_cool, 자동모드: state_auto)
#       offset: 7
#       data: [0x01]
#     state_away: #Option (외출모드)
#       offset: 7
#       data: [0x07]
#     command_off: #Required (끄기 명령)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x14, 0x04, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x14, 0x04, 0x04]
#     command_heat: #Option (난방모드 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x14, 0x01, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x14, 0x01, 0x01]
#     command_away: #Option (외출 켜기)
#       data: [0x0B, 0x01, 0x18, 0x02, 0x46, 0x14, 0x07, 0x00]
#       ack: [0x0D, 0x01, 0x18, 0x04, 0x46, 0x14, 0x07, 0x07]
#     command_temperature: !lambda |- #Required (온도 조절)
#       // @param: const float x
#       return {
#                {0x0B, 0x01, 0x18, 0x02, 0x45, 0x14, (uint8_t)x, 0x00},
#                {0x0D, 0x01, 0x18, 0x04, 0x45, 0x14, (uint8_t)x, 0x01}
#              };
#     command_state: [0x0B, 0x01, 0x18, 0x01, 0x46, 0x14, 0x00, 0x00] # 요청은 한곳에서만
#     update_interval: 63s # 상태요청 주기
